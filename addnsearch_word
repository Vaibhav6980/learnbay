//trie implementation primarily
//addnsearch word
#include <iostream>
#include <string.h>
using namespace std;
#define ALPHABET_SIZE 26

struct TrieNode
{
	//Here it will create children array of size 26
	//https://overiq.com/c-programming-101/array-of-pointers-in-c/
	struct TrieNode *children[ALPHABET_SIZE];
	bool isEndOfWord;	
};
bool search (TrieNode * , string );
void search_string(TrieNode * , string );
struct TrieNode *createNode()
{
	//would create a array of 26 chars
	struct TrieNode * p = new TrieNode;
	p->isEndOfWord = false;
	for(int i=0; i<ALPHABET_SIZE; i++)
	{
		p->children[i]=NULL;
	}
	return p;
}
void addword (TrieNode *r, string keys)
{
	//Use another pointer
	TrieNode * p = r;
	//traverse input keys char by char
	//and build the trie
	for (int i=0 ; i<keys.length(); i++)
	{
		//It is array of pointers
		//it has indexes 0 to 25 which represent alphabet
		//a=0, b=1, c=2, d=3----z=25
		//and each index or cell is a pointer
		//only pointers are stored.
		//therefore we check if index corresponding 
		//to character exists
		int index = keys[i] - 'a';
		//cout<<"Character is "<<keys[i]<<endl;
	//	cout<<"Index corresponding to char is "<<index<<endl;
		//Insert a new entry of data only when 
		//that index is NULL i.e. create a new node.
		//else
		//just set data
		if (p->children[index] == NULL)
		{
			//Create NODE
		//	cout<<"Creating new node now"<<endl; 	
			p->children[index] = createNode();
		}
		p=p->children[index];
	}
	//Here b->a->d-> now set EndOfWOrd as true in next node
	p->isEndOfWord=true;
}

bool recursive_search (TrieNode * r, int remaining_length, string q_key)
{
	//Use another pointer
	TrieNode *p = r;
	int req_index = q_key.size() - remaining_length;
	//Exit Condition
	if (remaining_length == 1) 
	{
	//	cout<<"Check when rem_len = 1"<<endl;
		if (q_key[req_index] != '.')
		{
		//	cout<<"Check when rem_len = 1, char is there at index "<<req_index<<endl;
			//the index is a character
			int index = q_key[req_index] - 'a';
			//Check for last character
			if (p->children[index] != NULL )
			{
				//Move forward to lower node
				p=p->children[index];
				//Check if p->children has isEndOfWord == true
				if (p->isEndOfWord == true)
				{
				//	cout<<"Check when rem_len = 1, char is there, endofword is true"<<endl;
					return true;
				}
				else
				{
					return false;
				}
			}
		}
		//index value is .
		else
		{
			//Dont match char .
			//Just traverse from left to right and whichever index value is not NULL 
			//that is enough for us to consider BUT, its next children must be ENDMARKER
	//		cout<<"Check when rem_len = 1, char is . at index "<<req_index<<endl;
			int e=0;
			while ( e<= ALPHABET_SIZE ) 
			{
				if (p->children[e] != NULL)
				{
					TrieNode *q = p->children[e];
					if  (q->isEndOfWord == true)
					{
						return true;		
					}
				}
				e++; 
			}
		}
	}
	//Recursive processing
	else
	{
		//when length is greater than 1
		//q_key is query key i.e. string to be searched
		//Check char by char
	//	cout<<"Check when rem_len > 1"<<endl;
		while(( remaining_length + req_index) <= q_key.size() )
		{
			if (q_key[req_index] != '.')
			{
			//	cout<<"Check when char is there at index "<<req_index<<endl;
				int index = q_key[req_index] - 'a';
				//Now check if data is matching with q_key
				//Check character by character
				//For a match
				if (p->children[index] != NULL)
				{
					//Move forward to lower node
					p=p->children[index];
					if (recursive_search(p, remaining_length-1, q_key ))
						return true;
					else
						return false;
				}
				//For not a match
				else
				{
					return false;
				}
			}
			else
			{
				//when char is "."
				//we will have to traverse from left to right and look for appropriate
				//Just traverse from left to right and whichever index value is not NULL 
				//that is enough for us to consider BUT, its next children must be ENDMARKER
			//	cout<<"Check when char is . at index "<<req_index<<endl;
				int e=0;
				int flag=0;
				while (( e<= ALPHABET_SIZE )&&(flag!=1)) 
				{
					//Just check data should be there 
					//No index check
					if ( p->children[e] != NULL)
					{
						TrieNode *q = p->children[e];
						if (recursive_search(q, remaining_length-1, q_key ))
						{
							flag=1;
							return true;
						}
					}
					e++; 
				}	
				return false;		
			}			
		}
	}
}

bool search (TrieNode * r, string q_key)
{
	//Use another pointer
	TrieNode *p = r;
	//q_key is query key i.e. string to be searched
	//Check char by char
	for (int i = 0; i<q_key.length(); i++)
	{
			int index = q_key[i] - 'a';
			//Now check if data is matching with q_key
			//Check character by character
			//For a match
			if (p->children[index] != NULL)
			{
				//Move forward to lower node
				p=p->children[index];
				//for last index check the value of isEndofWord is set
				if ( i == q_key.length()-1 )
				{
					//Check if p->children has isEndOfWord == true
					if (p->isEndOfWord == true)
					{
						return true;
					}
				}
			}
			//For not a match
			else
			{
				return false;
			}
		
	}
	return false;
}
int main()
{
	//Approach: add words as trie and then 
	//search them from trie structure
	string dict [] = {"bad", "mad", "dad","k", "lt", "tg", "dadb"};
	int n = sizeof(dict)/sizeof(dict[0]);
	//root node
	struct TrieNode * r = createNode();
	//Now create tree as per input keys from dict
	for (int i=0; i<n; i++)
	{
		addword(r, dict[i]);
	}
	string q_string = "pad";
	search_string(r, q_string);
	q_string = "bad";
	search_string(r, q_string);
	q_string = ".";
	search_string(r, q_string);
	q_string = "t.";
	search_string(r, q_string);
	q_string = ".t";
	search_string(r, q_string);
	q_string = "..db";
	search_string(r, q_string);
	q_string = "..t";	//NOT WORKING
	search_string(r, q_string);
	q_string = "..d.";	//NOT WORKING
	search_string(r, q_string);
	
	return 0;
}
void search_string(TrieNode * r, string q_string)
{
	int length = q_string.size();
	cout<<"Length of string "<<q_string <<" is "<<length<<endl;
	if (recursive_search(r, length, q_string))
		cout<<"Word "<<q_string<<" Found in Trie"<<endl;
	else
		cout<<"Word "<<q_string<<" Not Found in Trie"<<endl;
}
