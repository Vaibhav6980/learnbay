//I was not aware on how to implement it .
//So, just tried to learn from geeks for geeks. Code is not mine, all copied
#include <iostream>
#include <list>
using namespace std;
class Graph
{
	private:
		int v;
		list <int>*adj;
	public:	
	Graph(int no_vertices)
	{
		this->v = no_vertices;
		adj = new list<int>[v];
	}
	void addEdge(int u, int v)
	{
		adj[u].push_back(v);		
	}
	bool iscyclic()
	{
		bool *visited = new bool [v];
		bool *recStack = new bool [v];
		for (int i =0;i<v;i++)
		{
			visited[i] = false;
			recStack[i] = false;
		}
		for (int i=0;i<v;i++)
		{
			if (iscyclicutil(i, visited, recStack))
			{
				return true;
			}	
		}	
		return false;
	}
	bool iscyclicutil(int v, bool visited[], bool *recStack)
	{
		if(visited[v] == false) 
    	{ 
        // Mark the current node as visited and part of recursion stack 
        visited[v] = true; 
        recStack[v] = true; 
        
        list<int>::iterator i;
        for (i=adj[v].begin(); i!=adj[v].end(); i++)
        {
        	if ( !visited[*i] && iscyclicutil(*i, visited, recStack) ) 
                return true; 
        	if (recStack[*i])
        		return true;
		}
    	}
    	return false;
	}
};
int main()
{
	Graph g(4);
	g.addEdge(0, 1);	
	g.addEdge(0, 2); 
    g.addEdge(1, 2); 
    g.addEdge(2, 0); 
    g.addEdge(2, 3); 
    g.addEdge(3, 3);
	return 0;
}
